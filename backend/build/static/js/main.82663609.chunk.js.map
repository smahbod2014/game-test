{"version":3,"sources":["components/GameSession.tsx","config/firebase.ts","components/Login.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["socket","io","GetRedRemaining","game","RedIndexes","length","filter","value","RevealedIndexes","includes","GetBlueRemaining","BlueIndexes","IsAlreadyRevealed","index","GameSession","gameID","useParams","useState","gameState","setGameState","localStorage","getItem","isSpymaster","setIsSpymaster","undefined","useEffect","on","g","JSON","parse","GameState","Reset","removeItem","emit","bg","minH","pt-50","text4XL","white","textCenter","w","ml","mr","mt-30","flex","justifyContent","text3XL","inline","color","StartingTeam","text2XL","WhoseTurn","GameOver","as","bgGray400","bgGray400--D10--hover","rounded","py3","px5","outlineNone","cursorPointer","disabled","onClick","flexWrap","h","mt-20","Words","map","word","textColor","bgColor","AssassinIndex","NeutralIndexes","alignItems","text","borderStyle","border","borderBlack","stringify","Index","GameID","mt","className","type","id","checked","onChange","e","target","setItem","String","htmlFor","ml10","Firebase","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","onLoginClicked","auth","signInAnonymously","onLogoutClicked","signOut","Login","LoggedIn","setLoggedIn","Loading","setLoading","onAuthStateChanged","user","Spinner","children","Button","Home","to","nanoid","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAOMA,EAASC,IAAG,yBAmBlB,SAASC,EAAgBC,GACvB,OACEA,EAAKC,WAAWC,OAChBF,EAAKC,WAAWE,QAAO,SAACC,GAAD,OAAWJ,EAAKK,gBAAgBC,SAASF,MAC7DF,OAIP,SAASK,EAAiBP,GACxB,OACEA,EAAKQ,YAAYN,OACjBF,EAAKQ,YAAYL,QAAO,SAACC,GAAD,OAAWJ,EAAKK,gBAAgBC,SAASF,MAC9DF,OAIP,SAASO,EAAkBT,EAAYU,GACrC,OAAOV,EAAKK,gBAAgBC,SAASI,GAoNxBC,MAjNf,WACE,IAAMC,EAAWC,cAAXD,OACN,EAAkCE,mBAAsB,MAAxD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBACe,SAAnDG,aAAaC,QAAQ,2BADvB,mBAAOC,EAAP,KAAoBC,EAApB,KAoBA,OAhBAR,OAAoBS,IAAXT,GAAmC,KAAXA,EAAgB,UAAYA,EAE7DU,qBAAU,WACRzB,EAAO0B,GAAG,cAAc,SAACvB,GACvB,IAAMwB,EAAeC,KAAKC,MAAM1B,GAChCgB,EAAaQ,EAAEG,WAEXH,EAAEI,QACJX,aAAaY,WAAW,0BACxBT,GAAe,OAInBvB,EAAOiC,KAAK,OAAQlB,KACnB,CAACA,IAECG,EAWH,eAAC,IAAD,CAAKgB,GAAG,UAAUC,KAAK,QAAvB,UACE,cAAC,IAAD,CAAKC,SAAA,EAAMC,SAAO,EAACC,OAAK,EAACC,YAAU,EAACC,EAAE,OAAtC,uBAGA,eAAC,IAAD,CAAKA,EAAE,SAASC,GAAG,OAAOC,GAAG,OAA7B,UACE,eAAC,IAAD,CAAKC,SAAA,EAAMC,MAAI,EAACC,eAAe,gBAA/B,UACE,eAAC,IAAD,CAAKP,OAAK,EAACQ,SAAO,EAAlB,UACE,cAAC,IAAD,CAAKC,QAAM,EAACC,MAAO9B,EAAU+B,aAA7B,SAC8B,QAA3B/B,EAAU+B,aACP/C,EAAgBgB,GAChBR,EAAiBQ,KAEvB,cAAC,IAAD,CAAK6B,QAAM,EAAX,uBACA,cAAC,IAAD,CACEA,QAAM,EACNC,MAAkC,QAA3B9B,EAAU+B,aAAyB,OAAS,MAFrD,SAI8B,QAA3B/B,EAAU+B,aACPvC,EAAiBQ,GACjBhB,EAAgBgB,QAGxB,eAAC,IAAD,CAAKgC,SAAO,EAACF,MAAO9B,EAAUiC,UAA9B,UAC2B,QAAxBjC,EAAUiC,UAAsB,MAAQ,OACxCjC,EAAUkC,SAAW,SAAW,aAEnC,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,GAAG,SACHC,WAAS,EACTC,yBAAA,EACAjB,OAAK,EACLkB,SAAO,EACPC,KAAG,EACHC,KAAG,EACHC,aAAW,EACXC,eAAa,EACbC,SAAU3C,EAAUkC,SACpBU,QAAS,WACP9D,EAAOiC,KAAK,OAAQlB,IAZxB,uBAoBJ,cAAC,IAAD,CACE6B,MAAI,EACJmB,SAAS,OACTC,EAAE,QACFC,SAAA,EACApB,eAAe,gBALjB,SAOG3B,EAAUgD,MAAMC,KAAI,SAACC,EAAMvD,GAC1B,IAAIwD,EAAY,QACZC,EAAU,UAiCd,OAhCIhD,IACEJ,EAAUd,WAAWK,SAASI,GAChCwD,EAAY,MACHnD,EAAUP,YAAYF,SAASI,GACxCwD,EAAY,OACHnD,EAAUqD,eAAiB1D,IACpCyD,EAAU,SAIVpD,EAAUV,gBAAgBC,SAASI,IACrCwD,EAAY,QACRnD,EAAUd,WAAWK,SAASI,GAChCyD,EAAU,MACDpD,EAAUP,YAAYF,SAASI,GACxCyD,EAAU,OACDpD,EAAUsD,eAAe/D,SAASI,IAC3CyD,EAAU,UACVD,EAAY,SAEZC,EAAU,WAEHpD,EAAUkC,WAAa9B,IAC5BJ,EAAUd,WAAWK,SAASI,GAChCyD,EAAU,UACDpD,EAAUP,YAAYF,SAASI,GACxCyD,EAAU,UACDzD,GAASK,EAAUqD,gBAC5BD,EAAU,YAKZ,cAAC,IAAD,CAGE9B,EAAE,QACFwB,EAAE,QACF9B,GAAIoC,EACJtB,MAAOqB,EACPzB,MAAI,EACJC,eAAe,SACf4B,WAAW,SACXC,KAAM,GACNC,YAAY,QACZC,OAAQtD,GAAeJ,EAAUqD,eAAiB1D,GAAS,EAC3DgE,YAAa3D,EAAUqD,eAAiB1D,EACxC+C,eACGtC,IACAJ,EAAUkC,WACVxC,EAAkBM,EAAWL,GAEhCiD,QAAS,WACHxC,GAAeJ,EAAUkC,UAG7BpD,EAAOiC,KACL,YACAL,KAAKkD,UAAU,CAAEC,MAAOlE,EAAOmE,OAAQjE,MAzB7C,SA6BGqD,GA5BIvD,QAiCb,eAAC,IAAD,CACE+B,MAAI,EACJC,eAAe,WACfoC,GAAG,OACHjC,MAAM,QACNyB,WAAW,SALb,UAOE,sBAAKS,UAAU,yBAAf,UACE,uBACEA,UAAU,6BACVC,KAAK,WACLC,GAAG,yBACHC,QAAS/D,EACTgE,SAAU,SAACC,GACThE,EAAegE,EAAEC,OAAOH,SACxBjE,aAAaqE,QACX,yBACAC,OAAOH,EAAEC,OAAOH,aAItB,uBACEH,UAAU,6BACVS,QAAQ,yBAFV,0BAOF,cAAC,IAAD,CACEtC,GAAG,SACHuC,MAAI,EACJtC,WAAS,EACTC,yBAAA,EACAjB,OAAK,EACLkB,SAAO,EACPC,KAAG,EACHC,KAAG,EACHC,aAAW,EACXC,eAAa,EACbE,QAAS,WACP9D,EAAOiC,KAAK,WAAYlB,IAZ5B,+BAjKJ,cAAC,IAAD,CAAKmB,GAAG,UAAUC,KAAK,QAAvB,SACE,cAAC,IAAD,CAAKC,SAAA,EAAMC,SAAO,EAACC,OAAK,EAACC,YAAU,EAACC,EAAE,OAAtC,2B,0BC1DOqD,E,MAFEC,EAASC,cAVH,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBCLjB,SAASC,IACPV,EAASW,OAAOC,oBAGlB,SAASC,IACPb,EAASW,OAAOG,UAgCHC,MA7Bf,WACE,MAAgC3F,oBAAS,GAAzC,mBAAO4F,EAAP,KAAiBC,EAAjB,KACA,EAA8B7F,oBAAS,GAAvC,mBAAO8F,EAAP,KAAgBC,EAAhB,KAOA,OALAnB,EAASW,OAAOS,oBAAmB,SAACC,GAClCJ,EAAoB,MAARI,GACZF,GAAW,MAGTD,EACK,cAACI,EAAA,EAAD,CAASnE,MAAM,OAAOoE,SAAS,KAItC,qCACE,4CACCP,EACC,cAACQ,EAAA,EAAD,CAAQnC,UAAU,OAAOlC,MAAM,OAAOc,QAAS4C,EAA/C,qBAIA,cAACW,EAAA,EAAD,CAAQnC,UAAU,OAAOlC,MAAM,OAAOc,QAASyC,EAA/C,iC,QCgBOe,EAzCF,WACX,MAAiCrG,mBAAS,IAA1C,mBACA,GADA,UAC8BA,oBAAS,IAAvC,mBAAO8F,EAAP,UAMA,OAAIA,EACK,cAACI,EAAA,EAAD,CAASnE,MAAM,OAAOoE,SAAS,KAQtC,eAAC,IAAD,CAAKlC,UAAU,aAAf,UACE,yCAIA,cAAC,IAAD,CAAMqC,GAAE,gBAAWC,eAAnB,SACE,cAACH,EAAA,EAAD,CAAQrE,MAAM,OAAd,4BCeOyE,MA5Bf,WAGE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACE,8BAEE,cAAC,EAAD,QAIJ,cAAC,IAAD,CAAOD,KAAK,SAAZ,SACE,qBAAKxC,UAAU,aAAf,SACE,cAAC,EAAD,QAGJ,cAAC,IAAD,CAAOwC,KAAK,gBAAZ,SACE,8BACE,cAAC,EAAD,cCxBGE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.82663609.chunk.js","sourcesContent":["import { useParams } from \"react-router\";\nimport { nanoid } from \"nanoid\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Box } from \"@fower/react\";\nimport { useInterval } from \"../hooks/useInterval\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:8555\");\n\ninterface Game {\n  Words: string[];\n  RedIndexes: number[];\n  BlueIndexes: number[];\n  NeutralIndexes: number[];\n  AssassinIndex: number;\n  RevealedIndexes: number[];\n  WhoseTurn: string;\n  StartingTeam: string;\n  GameOver: boolean;\n}\n\ninterface GameFlags {\n  GameState: Game;\n  Reset: boolean;\n}\n\nfunction GetRedRemaining(game: Game): number {\n  return (\n    game.RedIndexes.length -\n    game.RedIndexes.filter((value) => game.RevealedIndexes.includes(value))\n      .length\n  );\n}\n\nfunction GetBlueRemaining(game: Game): number {\n  return (\n    game.BlueIndexes.length -\n    game.BlueIndexes.filter((value) => game.RevealedIndexes.includes(value))\n      .length\n  );\n}\n\nfunction IsAlreadyRevealed(game: Game, index: number): boolean {\n  return game.RevealedIndexes.includes(index);\n}\n\nfunction GameSession() {\n  let { gameID } = useParams<{ gameID: string }>();\n  const [gameState, setGameState] = useState<Game | null>(null);\n  const [isSpymaster, setIsSpymaster] = useState(\n    localStorage.getItem(\"codenames_is_spymaster\") === \"true\"\n  );\n\n  gameID = gameID === undefined || gameID === \"\" ? \"default\" : gameID;\n\n  useEffect(() => {\n    socket.on(\"game_state\", (game: string) => {\n      const g: GameFlags = JSON.parse(game);\n      setGameState(g.GameState);\n\n      if (g.Reset) {\n        localStorage.removeItem(\"codenames_is_spymaster\");\n        setIsSpymaster(false);\n      }\n    });\n\n    socket.emit(\"join\", gameID);\n  }, [gameID]);\n\n  if (!gameState) {\n    return (\n      <Box bg=\"#282c34\" minH=\"100vh\">\n        <Box pt-50 text4XL white textCenter w=\"100%\">\n          Loading...\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box bg=\"#282c34\" minH=\"100vh\">\n      <Box pt-50 text4XL white textCenter w=\"100%\">\n        CODENAMES\n      </Box>\n      <Box w=\"1000px\" ml=\"auto\" mr=\"auto\">\n        <Box mt-30 flex justifyContent=\"space-between\">\n          <Box white text3XL>\n            <Box inline color={gameState.StartingTeam}>\n              {gameState.StartingTeam === \"red\"\n                ? GetRedRemaining(gameState)\n                : GetBlueRemaining(gameState)}\n            </Box>\n            <Box inline>&#160;-&#160;</Box>\n            <Box\n              inline\n              color={gameState.StartingTeam === \"red\" ? \"blue\" : \"red\"}\n            >\n              {gameState.StartingTeam === \"red\"\n                ? GetBlueRemaining(gameState)\n                : GetRedRemaining(gameState)}\n            </Box>\n          </Box>\n          <Box text2XL color={gameState.WhoseTurn}>\n            {gameState.WhoseTurn === \"red\" ? \"Red\" : \"Blue\"}\n            {gameState.GameOver ? \" wins!\" : \"'s turn\"}\n          </Box>\n          <Box>\n            <Box\n              as=\"button\"\n              bgGray400\n              bgGray400--D10--hover\n              white\n              rounded\n              py3\n              px5\n              outlineNone\n              cursorPointer\n              disabled={gameState.GameOver}\n              onClick={() => {\n                socket.emit(\"pass\", gameID);\n              }}\n            >\n              Pass\n            </Box>\n          </Box>\n        </Box>\n\n        <Box\n          flex\n          flexWrap=\"wrap\"\n          h=\"670px\"\n          mt-20\n          justifyContent=\"space-between\"\n        >\n          {gameState.Words.map((word, index) => {\n            let textColor = \"black\";\n            let bgColor = \"#d3d3d3\";\n            if (isSpymaster) {\n              if (gameState.RedIndexes.includes(index)) {\n                textColor = \"red\";\n              } else if (gameState.BlueIndexes.includes(index)) {\n                textColor = \"blue\";\n              } else if (gameState.AssassinIndex == index) {\n                bgColor = \"gray\";\n              }\n            }\n\n            if (gameState.RevealedIndexes.includes(index)) {\n              textColor = \"white\";\n              if (gameState.RedIndexes.includes(index)) {\n                bgColor = \"red\";\n              } else if (gameState.BlueIndexes.includes(index)) {\n                bgColor = \"blue\";\n              } else if (gameState.NeutralIndexes.includes(index)) {\n                bgColor = \"#e6d2ac\";\n                textColor = \"black\";\n              } else {\n                bgColor = \"#1c1c1c\";\n              }\n            } else if (gameState.GameOver && !isSpymaster) {\n              if (gameState.RedIndexes.includes(index)) {\n                bgColor = \"#ff9696\";\n              } else if (gameState.BlueIndexes.includes(index)) {\n                bgColor = \"#9696ff\";\n              } else if (index == gameState.AssassinIndex) {\n                bgColor = \"#1c1c1c\";\n              }\n            }\n\n            return (\n              <Box\n                key={index}\n                // m=\"12px\"\n                w=\"188px\"\n                h=\"122px\"\n                bg={bgColor}\n                color={textColor}\n                flex\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                text={22}\n                borderStyle=\"solid\"\n                border={isSpymaster && gameState.AssassinIndex == index && 7}\n                borderBlack={gameState.AssassinIndex == index}\n                cursorPointer={\n                  !isSpymaster &&\n                  !gameState.GameOver &&\n                  !IsAlreadyRevealed(gameState, index)\n                }\n                onClick={() => {\n                  if (isSpymaster || gameState.GameOver) {\n                    return;\n                  }\n                  socket.emit(\n                    \"selection\",\n                    JSON.stringify({ Index: index, GameID: gameID })\n                  );\n                }}\n              >\n                {word}\n              </Box>\n            );\n          })}\n        </Box>\n        <Box\n          flex\n          justifyContent=\"flex-end\"\n          mt=\"10px\"\n          color=\"white\"\n          alignItems=\"center\"\n        >\n          <div className=\"form-check form-switch\">\n            <input\n              className=\"form-check-input hoverable\"\n              type=\"checkbox\"\n              id=\"flexSwitchCheckChecked\"\n              checked={isSpymaster}\n              onChange={(e) => {\n                setIsSpymaster(e.target.checked);\n                localStorage.setItem(\n                  \"codenames_is_spymaster\",\n                  String(e.target.checked)\n                );\n              }}\n            />\n            <label\n              className=\"form-check-label hoverable\"\n              htmlFor=\"flexSwitchCheckChecked\"\n            >\n              Spymaster\n            </label>\n          </div>\n          <Box\n            as=\"button\"\n            ml10\n            bgGray400\n            bgGray400--D10--hover\n            white\n            rounded\n            py3\n            px5\n            outlineNone\n            cursorPointer\n            onClick={() => {\n              socket.emit(\"new_game\", gameID);\n            }}\n          >\n            New Game\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default GameSession;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAFNePLTOKWs2NMNljXmQIUxUuxQan2ruQ\",\n  authDomain: \"game-test-c4bed.firebaseapp.com\",\n  projectId: \"game-test-c4bed\",\n  storageBucket: \"game-test-c4bed.appspot.com\",\n  messagingSenderId: \"99636756606\",\n  appId: \"1:99636756606:web:a262580aba6761cf74582f\",\n  measurementId: \"G-LYCD2N4TB2\",\n};\n\nconst Firebase = firebase.initializeApp(firebaseConfig);\n\nexport default Firebase;\n","import { Button, Spinner } from \"reactstrap\";\nimport Firebase from \"../config/firebase\";\nimport { useState } from \"react\";\n\nfunction onLoginClicked() {\n  Firebase.auth().signInAnonymously();\n}\n\nfunction onLogoutClicked() {\n  Firebase.auth().signOut();\n}\n\nfunction Login() {\n  const [LoggedIn, setLoggedIn] = useState(false);\n  const [Loading, setLoading] = useState(true);\n\n  Firebase.auth().onAuthStateChanged((user) => {\n    setLoggedIn(user != null);\n    setLoading(false);\n  });\n\n  if (Loading) {\n    return <Spinner color=\"info\" children=\"\" />;\n  }\n\n  return (\n    <>\n      <h1>Login Page</h1>\n      {LoggedIn ? (\n        <Button className=\"mt-5\" color=\"info\" onClick={onLogoutClicked}>\n          Log out\n        </Button>\n      ) : (\n        <Button className=\"mt-5\" color=\"info\" onClick={onLoginClicked}>\n          Log in as guest\n        </Button>\n      )}\n    </>\n  );\n}\n\nexport default Login;\n","import { Box } from \"@fower/react\";\nimport React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { styled } from \"@fower/styled\";\nimport Firebase from \"../config/firebase\";\nimport { Button, Spinner } from \"reactstrap\";\nimport { nanoid } from \"nanoid\";\n\nconst Home = () => {\n  const [sessionID, setSessonID] = useState(\"\");\n  const [Loading, setLoading] = useState(false);\n\n  // Firebase.auth().onAuthStateChanged((user) => {\n  //   setLoading(false);\n  // });\n\n  if (Loading) {\n    return <Spinner color=\"info\" children=\"\" />;\n  }\n\n  // if (!Firebase.auth().currentUser) {\n  //   return <Redirect to=\"/login\" />;\n  // }\n\n  return (\n    <Box className=\"App-header\">\n      <h1>Welcome</h1>\n\n      {/* <Box>Welcome, {Firebase.auth().currentUser?.uid}</Box> */}\n\n      <Link to={`/game/${nanoid()}`}>\n        <Button color=\"info\">New Game</Button>\n        {/* <Box\n          as=\"button\"\n          mt=\"5\"\n          text4XL\n          border-1\n          rounded=\"5\"\n          w=\"100%\"\n          minW=\"200\"\n          onClick={() => setSessonID(\"\")}\n        >\n          Go\n        </Box> */}\n      </Link>\n    </Box>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { nanoid } from \"nanoid\";\nimport GameSession from \"./components/GameSession\";\nimport {\n  BrowserRouter,\n  HashRouter,\n  Link,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport { Box } from \"@fower/react\";\nimport { styled } from \"@fower/styled\";\nimport Login from \"./components/Login\";\nimport Home from \"./components/Home\";\nimport AuthRoute from \"./components/AuthRoute\";\n\nfunction App() {\n  // const [id, idSet] = useState<string | null>(null);\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact>\n          <div>\n            {/* <AuthRoute> */}\n            <Home />\n            {/* </AuthRoute> */}\n          </div>\n        </Route>\n        <Route path=\"/login\">\n          <div className=\"App-header\">\n            <Login />\n          </div>\n        </Route>\n        <Route path=\"/game/:gameID\">\n          <div>\n            <GameSession />\n          </div>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}